# Context-Free Grammar for badlang

# TODO: Write the complete CFG for the badlang programming language
# 
# Instructions:
# - Write production rules in a clear, unambiguous format
# - Use standard notation from class/book
# - Include all language constructs: expressions, statements, functions, etc.
# - Stratify the grammar to capture operator precedence
# - You may write this informally, but be precise and complete
#
# Example format:
# program → declaration* EOF
# declaration → varDecl | funDecl | statement
# statement → exprStmt | printStmt | block | ifStmt | whileStmt | returnStmt
# ...

## TERMINALS (Tokens)
# TODO: List all terminal symbols (keywords, operators, literals, etc.)

# Keywords: int, bool, fun, if, else, while, return, print, true, false

Keywords: INT, BOOLEAN, FUN, IF, ELSE, WHILE, RETURN, PRINT, true, false
operators: MINUS, PLUS, TIMES, DIVIDE, AND_AND, OR_OR, ==, !=, <, >, <=, >=
literals: NUMBER, BOOLEAN
identifiers: IDENTIFIER
punctuation: LPAREN, RPAREN, LBRACE, RBRACE, COMMA, SEMICOLON


## NON-TERMINALS and PRODUCTION RULES
# TODO: Write production rules for each non-terminal

# Example structure to get you started:
# program → 
# declaration → 
# statement → 
# expression → 
# ...


expression → assignment
assignment → logic_or
    | IDENTIFIER ASSIGN assignment
logic_or → logic_and
    | logic_or OR logic_and
logic_and → equality
    | logic_and AND equality
equality → comparison
    | equality (== | !=) comparison
comparison → term
    | comparison (< | > | <= | >=) term
term → factor
    | term (PLUS | MINUS) factor
factor → unary
    | factor (TIMES | DIVIDE) unary
unary → primary
    | (MINUS | NOT) unary
primary → NUMBER 
    | BOOLEAN
    | IDENTIFIER
    | TRUE
    | FALSE
    | LPAREN expression RPAREN
    | IDENTIFIER LPAREN args RPAREN
    | IDENTIFIER LPAREN RPAREN

args → expression
    | expression COMMA args

statement → IDENTIFIER ASSIGN expression SEMICOLON
    | IF LPAREN expression RPAREN block ELSE block
    | IF LPAREN expression RPAREN block
    | WHILE LPAREN expression RPAREN block
    | RETURN expression SEMICOLON
    | PRINT LPAREN expression RPAREN SEMICOLON
    | block

funDecl → FUN IDENTIFIER LPAREN params RPAREN block
params → IDENTIFIER
    | IDENTIFIER COMMA params
    | ε
varDecl → type IDENTIFIER SEMICOLON
    | type IDENTIFIER ASSIGN expression SEMICOLON
type → INT | BOOLEAN
block → LBRACE statement* RBRACE
program → statement *EOF
